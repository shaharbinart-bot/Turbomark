version: '3.8'

services:
  # Frontend (React/TypeScript)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://backend:5000
      - REACT_APP_WS_URL=ws://backend:5000
    depends_on:
      - backend
    networks:
      - turbomarketing-network
    restart: unless-stopped

  # Backend API (Node.js/TypeScript)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/turbomarketing
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    depends_on:
      - postgres
      - redis
      - ai-engine
    networks:
      - turbomarketing-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # AI Engine (Python/FastAPI)
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/turbomarketing
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - MODEL_CACHE_DIR=/app/model_cache
    depends_on:
      - postgres
      - redis
    networks:
      - turbomarketing-network
    restart: unless-stopped
    volumes:
      - model_cache:/app/model_cache
      - ./ai-engine/logs:/app/logs

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=turbomarketing
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schemas:/docker-entrypoint-initdb.d
    networks:
      - turbomarketing-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - turbomarketing-network
    restart: unless-stopped

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - turbomarketing-network
    restart: unless-stopped

  # Background Job Processing
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: npm run worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/turbomarketing
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - turbomarketing-network
    restart: unless-stopped
    deploy:
      replicas: 3
       # Background Job Processing
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: npm run worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/turbomarketing
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - turbomarketing-network
    restart: unless-stopped
    deploy:
      replicas: 3

  # Health Monitoring Service
  monitor:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: node src/monitor.js
    environment:
      - NODE_ENV=production
      - MONITOR_EMAIL=${MONITOR_EMAIL}
      - MONITOR_PASSWORD=${MONITOR_PASSWORD}
    depends_on:
      - backend
      - ai-engine
      - frontend
    networks:
      - turbomarketing-network
    restart: unless-stopped
    # Business Intelligence Monitor
  business-monitor:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: node src/business-monitor.js
    environment:
      - NODE_ENV=production
      - MONITOR_EMAIL=${MONITOR_EMAIL}
      - MONITOR_PASSWORD=${MONITOR_PASSWORD}
    depends_on:
      - backend
      - monitor
    networks:
      - turbomarketing-network
    restart: unless-stopped
    # External Uptime Monitor  
  external-monitor:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: node src/external-monitor.js
    environment:
      - NODE_ENV=production
      - TURBOMARK_DOMAIN=${TURBOMARK_DOMAIN:-your-domain.com}
      - MONITOR_EMAIL=${MONITOR_EMAIL}
      - MONITOR_PASSWORD=${MONITOR_PASSWORD}
    depends_on:
      - backend
      - business-monitor
    networks:
      - turbomarketing-network
    restart: unless-stopped
    # Deployment Webhook Handler
  deployment-webhook:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: node ../deploy/webhook-handler.js
    ports:
      - "9000:9000"
    environment:
      - NODE_ENV=production
      - WEBHOOK_PORT=9000
    depends_on:
      - external-monitor
    networks:
      - turbomarketing-network
    restart: unless-stopped
    volumes:
      - ./deploy:/app/deploy
      - /var/run/docker.sock:/var/run/docker.sock  # for docker commands
       # Database Backup Service
  backup-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: node ../backup/database-backup.js
    environment:
      - NODE_ENV=production
      - POSTGRES_DB=turbomarketing
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - MONITOR_EMAIL=${MONITOR_EMAIL}
      - MONITOR_PASSWORD=${MONITOR_PASSWORD}
    depends_on:
      - postgres
      - redis
      - deployment-webhook
    networks:
      - turbomarketing-network
    restart: unless-stopped
    volumes:
      - ./backup:/app/backup
      - ./backups:/app/backups
      - /var/run/docker.sock:/var/run/docker.sock

  # Rollback Management Service
  rollback-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: node ../backup/rollback-system.js
    environment:
      - NODE_ENV=production
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - MONITOR_EMAIL=${MONITOR_EMAIL}
      - MONITOR_PASSWORD=${MONITOR_PASSWORD}
    depends_on:
      - postgres
      - redis
      - backup-service
    networks:
      - turbomarketing-network
    restart: unless-stopped
    volumes:
      - ./backup:/app/backup
      - ./backups:/app/backups
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9002:9002"


  # Monitoring & Analytics
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - turbomarketing-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - turbomarketing-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  model_cache:
  nginx_logs:
  prometheus_data:
  grafana_data:

networks:
  turbomarketing-network:
    driver: bridge
